// 将本文本拷贝至根目录下的main.cpp中进行调试

#include <iostream>
#include "ListNode/LIstNode.h"
#include "ListNode/LinkedListUtils.h" // 包含头文件声明

using namespace std;


class Solution : public BaseSolution {
public:
    ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
        if (l1 && l2) {
            if (l1->val > l2->val) {
                swap(l1, l2);
            }
            l1->next = mergeTwoLists(l1->next, l2);
        }
        return l1 ? l1 : l2;
    }
};

/*
mergeTwoLists 函数接受两个参数，分别是指向链表节点的指针 l1 和 l2，它们分别表示两个有序链表的头节点。

函数使用了递归的思想来合并两个链表。首先进行判断，如果 l1 和 l2 都不为空（即非空链表），则执行以下操作：

检查 l1->val 和 l2->val 的大小关系，如果 l1 的值大于 l2 的值，则交换它们的位置，确保 l1 指向较小的节点。
然后，递归调用 mergeTwoLists 函数，传入 l1->next 和 l2，将返回的链表连接到 l1->next。
最后，返回 l1。
如果 l1 为空（即为空链表），则直接返回 l2；反之，如果 l2 为空，则直接返回 l1。这是因为当其中一个链表为空时，另一个链表剩余的部分已经是有序的，不需要进行额外的操作。


*/


int main() {
    Solution sol;
    ListNode *l1 = sol.createLinkedList({1, 2, 4});
    ListNode *l2 = sol.createLinkedList({1, 3, 4});

    ListNode *res = sol.mergeTwoLists(l1, l2);
    sol.printLinkedList(res);

    return 0;
}